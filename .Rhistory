mean(cmp_1$f_p11)
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k)^3 + (1|cpuFull) + (1|os)
, data = data_out)
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k)^3 + (1|cpuFull) + (1|os)
, data = training2_y
, control = lmerControl(check.scaleX = "message+rescale"))
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k)^3 + (1|cpuFull) + (1|os)
, data = data_out
, control = lmerControl(check.scaleX = "message+rescale"))
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+PC7+m+n+k + sr32m + sr32n + sr32k)^3 + (1|cpuFull) + (1|os)
, data = training2_y)  # [1]
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+PC7+m+n+k + sr32m + sr32n + sr32k)^3 + (1|cpuFull) + (1|os)
, data = data_out)  # [1]
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
par(mfrow=c(1,1))
plot(cmp_1$pred11_lg, cmp_1$time)
abline(0,1,col='red')
231-178+1
sr32_names <- col_names %>% filter(grepl("^Sequential_write.*by32$", name, perl=TRUE))
View(sr32_names)
# 2. create data.frame of this columns
training_sr32 <- training %>% select(c(sr32_names$name))
# 3. create matrix of coefficients
n_rows <- dim(training)[1]
coeffs_m <- numeric() # empty vector
coeffs_n <- numeric() # empty vector
coeffs_k <- numeric() # empty vector
for(i in 1:n_rows) {
c_m <- f(training[i,'m'][[1]] * 8, sr32_arr)
coeffs_m <- rbind(coeffs_m, c_m)
c_n <- f(training[i,'n'][[1]] * 8, sr32_arr)
coeffs_n <- rbind(coeffs_n, c_n)
c_k <- f(training[i,'k'][[1]] * 8, sr32_arr)
coeffs_k <- rbind(coeffs_k, c_k)
}
# 4. compute sum of multiplication
sw_m <- numeric() #empty vector
sw_n <- numeric() #empty vector
sw_k <- numeric() #empty vector
for(i in 1:n_rows) {
v_m <- sum(training_sr32[i,] * coeffs_m[i,])
sw_m <- rbind(sw_m, v_m)
v_n <- sum(training_sr32[i,] * coeffs_n[i,])
sw_n <- rbind(sw_n, v_n)
v_k <- sum(training_sr32[i,] * coeffs_k[i,])
sw_k <- rbind(sw_k, v_k)
}
training2_y <- training1_y %>% mutate(sw32m = sw_m, sw32n = sw_n, sw32k = sw_k)
View(training2_y)
sr32_names <- col_names %>% filter(grepl("^Sequential_read.*by32$", name, perl=TRUE))
# 2. create data.frame of this columns
training_sr32 <- training %>% select(c(sr32_names$name))
# 3. create matrix of coefficients
n_rows <- dim(training)[1]
coeffs_m <- numeric() # empty vector
coeffs_n <- numeric() # empty vector
coeffs_k <- numeric() # empty vector
for(i in 1:n_rows) {
c_m <- f(training[i,'m'][[1]] * 8, sr32_arr)
coeffs_m <- rbind(coeffs_m, c_m)
c_n <- f(training[i,'n'][[1]] * 8, sr32_arr)
coeffs_n <- rbind(coeffs_n, c_n)
c_k <- f(training[i,'k'][[1]] * 8, sr32_arr)
coeffs_k <- rbind(coeffs_k, c_k)
}
# 4. compute sum of multiplication
s_m <- numeric() #empty vector
s_n <- numeric() #empty vector
s_k <- numeric() #empty vector
for(i in 1:n_rows) {
v_m <- sum(training_sr32[i,] * coeffs_m[i,])
s_m <- rbind(s_m, v_m)
v_n <- sum(training_sr32[i,] * coeffs_n[i,])
s_n <- rbind(s_n, v_n)
v_k <- sum(training_sr32[i,] * coeffs_k[i,])
s_k <- rbind(s_k, v_k)
}
training2_y <- training2_y %>% mutate(sr32m = s_m, sr32n = s_n, sr32k = s_k)
View(training2_y)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k + sw32m + sw32n + sw32k)^3
+ (1|cpuFull) + (1|os)
, data = training2_y)  # [1]
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k + sw32m + sw32n + sw32k)^3
+ (1|cpuFull) + (1|os)
, data = data_out)
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
testing_sr32 <- testing %>% select(c(sr32_names$name))
# 3. create matrix of coefficients
n_rows <- dim(testing)[1]
t_coeffs_m <- numeric() # empty vector
t_coeffs_n <- numeric() # empty vector
t_coeffs_k <- numeric() # empty vector
for(i in 1:n_rows) {
c_m <- f(testing[i,'m'][[1]] * 8, sr32_arr)
t_coeffs_m <- rbind(t_coeffs_m, c_m)
c_n <- f(testing[i,'n'][[1]] * 8, sr32_arr)
t_coeffs_n <- rbind(t_coeffs_n, c_n)
c_k <- f(testing[i,'k'][[1]] * 8, sr32_arr)
t_coeffs_k <- rbind(t_coeffs_k, c_k)
}
# 4. compute sum of multiplication
t_sw_m <- numeric() #empty vector
t_sw_n <- numeric() #empty vector
t_sw_k <- numeric() #empty vector
for(i in 1:n_rows) {
v_m <- sum(testing_sr32[i,] * t_coeffs_m[i,])
t_sw_m <- rbind(t_sw_m, v_m)
v_n <- sum(testing_sr32[i,] * t_coeffs_n[i,])
t_sw_n <- rbind(t_sw_n, v_n)
v_k <- sum(testing_sr32[i,] * t_coeffs_k[i,])
t_sw_k <- rbind(t_sw_k, v_k)
}
testing2_y <- testing2_y %>% mutate(sw32m = t_sw_m, sw32n = t_sw_n, sw32k = t_sw_k)
View(testing2_y)
View(testing_sr32)
sr32_names <- col_names %>% filter(grepl("^Sequential_write.*by32$", name, perl=TRUE))
testing_sr32 <- testing %>% select(c(sr32_names$name))
# 3. create matrix of coefficients
n_rows <- dim(testing)[1]
t_coeffs_m <- numeric() # empty vector
t_coeffs_n <- numeric() # empty vector
t_coeffs_k <- numeric() # empty vector
for(i in 1:n_rows) {
c_m <- f(testing[i,'m'][[1]] * 8, sr32_arr)
t_coeffs_m <- rbind(t_coeffs_m, c_m)
c_n <- f(testing[i,'n'][[1]] * 8, sr32_arr)
t_coeffs_n <- rbind(t_coeffs_n, c_n)
c_k <- f(testing[i,'k'][[1]] * 8, sr32_arr)
t_coeffs_k <- rbind(t_coeffs_k, c_k)
}
# 4. compute sum of multiplication
t_sw_m <- numeric() #empty vector
t_sw_n <- numeric() #empty vector
t_sw_k <- numeric() #empty vector
for(i in 1:n_rows) {
v_m <- sum(testing_sr32[i,] * t_coeffs_m[i,])
t_sw_m <- rbind(t_sw_m, v_m)
v_n <- sum(testing_sr32[i,] * t_coeffs_n[i,])
t_sw_n <- rbind(t_sw_n, v_n)
v_k <- sum(testing_sr32[i,] * t_coeffs_k[i,])
t_sw_k <- rbind(t_sw_k, v_k)
}
testing2_y <- testing2_y %>% mutate(sw32m = t_sw_m, sw32n = t_sw_n, sw32k = t_sw_k)
View(testing2_y)
View(training2_y)
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k + sw32m + sw32n + sw32k)^3
+ (1|cpuFull) + (1|os)
, data = training2_y)  # [1]
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
par(mfrow=c(1,1))
plot(cmp_1$pred11_lg, cmp_1$time)
abline(0,1,col='red')
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k + sw32m + sw32n + sw32k)^3
+ (1|cpuFull) + (1|os)
, data = data_out)
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
par(mfrow=c(1,1))
plot(cmp_1$pred11_lg, cmp_1$time)
abline(0,1,col='red')
335-282+1
751-698+1
sr32_names <- col_names %>% filter(grepl("^SeqCopy.*by128$", name, perl=TRUE))
View(sr32_names)
# 2. create data.frame of this columns
training_sr32 <- training %>% select(c(sr32_names$name))
# 3. create matrix of coefficients
n_rows <- dim(training)[1]
coeffs_m <- numeric() # empty vector
coeffs_n <- numeric() # empty vector
coeffs_k <- numeric() # empty vector
for(i in 1:n_rows) {
c_m <- f(training[i,'m'][[1]] * 8, sr32_arr)
coeffs_m <- rbind(coeffs_m, c_m)
c_n <- f(training[i,'n'][[1]] * 8, sr32_arr)
coeffs_n <- rbind(coeffs_n, c_n)
c_k <- f(training[i,'k'][[1]] * 8, sr32_arr)
coeffs_k <- rbind(coeffs_k, c_k)
}
# 4. compute sum of multiplication
sw_m <- numeric() #empty vector
sw_n <- numeric() #empty vector
sw_k <- numeric() #empty vector
for(i in 1:n_rows) {
v_m <- sum(training_sr32[i,] * coeffs_m[i,])
sw_m <- rbind(sw_m, v_m)
v_n <- sum(training_sr32[i,] * coeffs_n[i,])
sw_n <- rbind(sw_n, v_n)
v_k <- sum(training_sr32[i,] * coeffs_k[i,])
sw_k <- rbind(sw_k, v_k)
}
training2_y <- training2_y %>% mutate(sc128m = sw_m, sc128n = sw_n, sc128k = sw_k)
View(training2_y)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k + sc128m + sc128n + sc128k)^3
+ (1|cpuFull) + (1|os)
, data = training2_y)  # [1]
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
testing_sr32 <- testing %>% select(c(sr32_names$name))
# 3. create matrix of coefficients
n_rows <- dim(testing)[1]
t_coeffs_m <- numeric() # empty vector
t_coeffs_n <- numeric() # empty vector
t_coeffs_k <- numeric() # empty vector
for(i in 1:n_rows) {
c_m <- f(testing[i,'m'][[1]] * 8, sr32_arr)
t_coeffs_m <- rbind(t_coeffs_m, c_m)
c_n <- f(testing[i,'n'][[1]] * 8, sr32_arr)
t_coeffs_n <- rbind(t_coeffs_n, c_n)
c_k <- f(testing[i,'k'][[1]] * 8, sr32_arr)
t_coeffs_k <- rbind(t_coeffs_k, c_k)
}
# 4. compute sum of multiplication
t_sw_m <- numeric() #empty vector
t_sw_n <- numeric() #empty vector
t_sw_k <- numeric() #empty vector
for(i in 1:n_rows) {
v_m <- sum(testing_sr32[i,] * t_coeffs_m[i,])
t_sw_m <- rbind(t_sw_m, v_m)
v_n <- sum(testing_sr32[i,] * t_coeffs_n[i,])
t_sw_n <- rbind(t_sw_n, v_n)
v_k <- sum(testing_sr32[i,] * t_coeffs_k[i,])
t_sw_k <- rbind(t_sw_k, v_k)
}
testing2_y <- testing2_y %>% mutate(sc128m = t_sw_m, sc128n = t_sw_n, sc128k = t_sw_k)
View(testing2_y)
View(testing2_y)
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sr32m + sr32n + sr32k + sc128m + sc128n + sc128k)^3
+ (1|cpuFull) + (1|os)
, data = data_out)  # [1]
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
par(mfrow=c(1,1))
plot(cmp_1$pred11_lg, cmp_1$time)
abline(0,1,col='red')
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sc128m + sc128n + sc128k)^3
+ (1|cpuFull) + (1|os)
, data = training2_y)  # [1]
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + sc128m + sc128n + sc128k)^3
+ (1|cpuFull) + (1|os)
, data = data_out)  # [1]
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k + I(m%%16) + I(n%%16) + I(k%%16) )^3
+ (1|cpuFull) + (1|os)
, data = training2_y)  # [1]
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
training2_y <- training2_y %>% mutate(ost16m = m%%16)
qplot(ost16m, time, data=training2_y, color=ost16m) +
geom_smooth(method="lm")
training2_y <- training2_y %>% mutate(ost16m = as.factor(m%%16))
qplot(ost16m, time, data=training2_y, color=ost16m) +
geom_smooth(method="lm")
qplot(ost16m, time, data=training2_y %>% mutate(mnk=m*n*k), color=ost16m) +
geom_smooth(method="lm")
qplot(mnk, time, data=training2_y %>% mutate(mnk=m*n*k), color=ost16m) +
geom_smooth(method="lm")
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k)^3
+ (1|cpuFull) + (1|os) + (1|ost16m)
, data = training2_y)  # [1]
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
training2_y <- training2_y %>% mutate(ost16m = as.factor(m%%16))
training2_y <- training2_y %>% mutate(ost16n = as.factor(n%%16))
training2_y <- training2_y %>% mutate(ost16k = as.factor(k%%16))
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k)^3
+ (1|cpuFull) + (1|os) + (1|ost16m) + (1|ost16n) + (1|ost16k)
, data = training2_y)  # [1]
sjp.lmer(fit11, type = "re.qq")
plot(fit11, resid(., scaled=FALSE) ~ fitted(.), abline = 0)
testing2_y <- testing2_y %>% mutate(ost16m = as.factor(m%%16))
testing2_y <- testing2_y %>% mutate(ost16n = as.factor(n%%16))
testing2_y <- testing2_y %>% mutate(ost16k = as.factor(k%%16))
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
library(LMERConvenienceFunctions)
w <- romr.fnc(fit11, data=training2_y, trim = 2.5)
data_out <- w$data # данные без выбросов
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k)^3
+ (1|cpuFull) + (1|os) + (1|ost16m) + (1|ost16n) + (1|ost16k)
, data = data_out)  # [1]
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
fit11 <- lmer(log10(time) ~  (PC1+PC2+PC3+PC4+PC5+PC6+m+n+k)^3
+ (1|cpuFull) + (1|os) + (1|ost16m) + (1|ost16n)
, data = data_out)  # [1]
#-------------------------
pred11 <- predict(fit11, testing2_y[,-1], allow.new.levels=T, na.action="na.pass")
# compare results and count MAPE
cmp_1 <- as.data.frame(cbind(testing1_y$time, pred11))
names(cmp_1) <- c("time", "pred11")
cmp_1 <- tbl_df(cmp_1)
# for log10
cmp_1 <- cmp_1 %>% mutate(pred11_lg = 10^pred11)
cmp_1 <- cmp_1 %>% mutate(f_p11 = abs(time-pred11_lg)/time)
cmp_1 <- cmp_1 %>% mutate(pred11_lg_1 = ifelse(pred11_lg < 1, 1,pred11_lg ))
cmp_1 <- cmp_1 %>% mutate(f_p11_1 = abs(time-pred11_lg_1)/time)
mean(cmp_1$f_p11)
alex_result <- read.csv("alex_result.csv", na.string = "None")
cat_result <- read.csv("res6.csv")
alex_result <- tbl_df(alex_result)
alex_result <- tbl_df(alex_result)
cat_result <- tbl_df(cat_result)
cat_result
alex_result <- read.csv("alex_result.csv", na.string = "None", header=F)
cat_result <- read.csv("res6.csv", header=F)
alex_result <- tbl_df(alex_result)
cat_result <- tbl_df(cat_result)
cat_result
r <- cbind(alex_result, cat_result)
r
head(r)
names(r) <- c("alex", "cat")
head(r)
r <- r %>%
mutate(cat1 = ifelse(cat < 1, 1.02, cat)) %>%
mutate(alex1 = ifelse(alex < 1, 1.02, alex)) %>%
mutate(mean1 = mean(cat1, alex1))
r <- r %>%
mutate(cat1 = ifelse(cat < 1, 1.02, cat)) %>%
mutate(alex1 = ifelse(alex < 1, 1.02, alex))
class(r)
head(r)
r
r <- tbl_df(r)
r
r %>% mutate(mean1 = mean(cat1, alex1))
mean(1,2,3)
r %>% mutate(m = mean(cat1, alex1))
r %>% mutate(m = (cat1+alex1)/2)
s <- r %>% select(m)
sum(s)
r <- r %>% mutate(m = (cat1+alex1)/2)
s <- r %>% select(m)
sum(s)
s
write.csv(x=s, file = "res_mean.csv", col.names=FALSE, row.names = FALSE, quote = FALSE)
getwd()
getwd()
setwd("C:/R-projects/test2")
shiny::runApp()
